# ===================================================================
# Production Deployment Pipeline for Blog Application
# ===================================================================
#
# This workflow implements production deployment with:
# - Manual approval workflow for production deployments
# - Blue-green deployment strategy for zero-downtime deployments
# - Production health checks with rollback capability
# - Database backup before deployment
# - Performance monitoring setup
# - Comprehensive notification system
#
# Triggers:
# - Manual workflow dispatch (production deployments are always manual)
# - Successful staging deployment (with manual approval)
# ===================================================================

name: 🌟 Deploy to Production

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment strategy'
        required: true
        default: 'blue-green'
        type: choice
        options:
        - blue-green
        - rolling
        - immediate
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'
        type: string
      skip_backup:
        description: 'Skip database backup (emergency only)'
        required: false
        default: 'false'
        type: boolean
      auto_rollback:
        description: 'Enable automatic rollback on failure'
        required: true
        default: 'true'
        type: boolean
      notification_channel:
        description: 'Notification channel'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - slack
        - email
        - none

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PRODUCTION_URL: https://blog-app.example.com
  BLUE_URL: https://blue.blog-app.example.com
  GREEN_URL: https://green.blog-app.example.com

jobs:
  # ===================================================================
  # APPROVAL GATE - Manual approval for production deployment
  # ===================================================================
  approval-gate:
    name: 🔐 Production Deployment Approval
    runs-on: ubuntu-latest
    environment: production-approval
    
    steps:
      - name: 📋 Deployment Information
        run: |
          echo "=== Production Deployment Request ==="
          echo "🏷️ Image Tag: ${{ inputs.image_tag }}"
          echo "🚀 Strategy: ${{ inputs.deployment_type }}"
          echo "💾 Skip Backup: ${{ inputs.skip_backup }}"
          echo "🔄 Auto Rollback: ${{ inputs.auto_rollback }}"
          echo "📢 Notifications: ${{ inputs.notification_channel }}"
          echo "👤 Requested by: ${{ github.actor }}"
          echo "🕐 Timestamp: $(date -u)"
          echo ""
          echo "⚠️ This deployment will affect the production environment."
          echo "✅ Please verify all changes have been tested in staging."

      - name: ✅ Manual Approval Required
        run: |
          echo "🔐 Manual approval completed by: ${{ github.actor }}"
          echo "🚀 Proceeding with production deployment..."

  # ===================================================================
  # PRE-DEPLOYMENT VALIDATION - Final checks before production
  # ===================================================================
  pre-deployment-validation:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    needs: approval-gate
    
    outputs:
      current_environment: ${{ steps.detect.outputs.current_environment }}
      target_environment: ${{ steps.detect.outputs.target_environment }}
      backup_required: ${{ steps.validate.outputs.backup_required }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Detect current environment state
        id: detect
        run: |
          echo "🔍 Detecting current production environment state..."
          
          # Check which environment is currently active
          if curl -f "${{ env.BLUE_URL }}/api/ping" 2>/dev/null; then
            if curl -f "${{ env.GREEN_URL }}/api/ping" 2>/dev/null; then
              echo "⚠️ Both blue and green environments are active"
              echo "current_environment=both" >> $GITHUB_OUTPUT
              echo "target_environment=green" >> $GITHUB_OUTPUT
            else
              echo "🔵 Blue environment is currently active"
              echo "current_environment=blue" >> $GITHUB_OUTPUT
              echo "target_environment=green" >> $GITHUB_OUTPUT
            fi
          elif curl -f "${{ env.GREEN_URL }}/api/ping" 2>/dev/null; then
            echo "🟢 Green environment is currently active"
            echo "current_environment=green" >> $GITHUB_OUTPUT
            echo "target_environment=blue" >> $GITHUB_OUTPUT
          else
            echo "❌ No environment is currently active - emergency deployment needed"
            echo "current_environment=none" >> $GITHUB_OUTPUT
            echo "target_environment=blue" >> $GITHUB_OUTPUT
          fi

      - name: ✅ Validate deployment prerequisites
        id: validate
        env:
          DOCKER_IMAGE_BACKEND: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-blog-backend:${{ inputs.image_tag }}
          DOCKER_IMAGE_FRONTEND: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-blog-frontend:${{ inputs.image_tag }}
        run: |
          echo "✅ Validating deployment prerequisites..."
          
          # Check if Docker images exist
          echo "🐳 Checking Docker images..."
          if docker manifest inspect "$DOCKER_IMAGE_BACKEND" >/dev/null 2>&1; then
            echo "✅ Backend image found: $DOCKER_IMAGE_BACKEND"
          else
            echo "❌ Backend image not found: $DOCKER_IMAGE_BACKEND"
            exit 1
          fi
          
          if docker manifest inspect "$DOCKER_IMAGE_FRONTEND" >/dev/null 2>&1; then
            echo "✅ Frontend image found: $DOCKER_IMAGE_FRONTEND"
          else
            echo "❌ Frontend image not found: $DOCKER_IMAGE_FRONTEND"
            exit 1
          fi
          
          # Determine if backup is required
          if [ "${{ inputs.skip_backup }}" = "true" ]; then
            echo "⚠️ Database backup will be skipped (emergency deployment)"
            echo "backup_required=false" >> $GITHUB_OUTPUT
          else
            echo "💾 Database backup will be performed"
            echo "backup_required=true" >> $GITHUB_OUTPUT
          fi
          
          echo "✅ All prerequisites validated"

  # ===================================================================
  # DATABASE BACKUP - Backup production database
  # ===================================================================
  database-backup:
    name: 💾 Database Backup
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation]
    if: needs.pre-deployment-validation.outputs.backup_required == 'true'
    environment: production
    
    outputs:
      backup_file: ${{ steps.backup.outputs.backup_file }}
      backup_size: ${{ steps.backup.outputs.backup_size }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Install dependencies
        working-directory: ./blog-list
        run: npm ci

      - name: 💾 Create production backup
        id: backup
        env:
          MONGO_URL: ${{ secrets.PRODUCTION_MONGO_URL }}
        run: |
          echo "💾 Creating production database backup..."
          
          # Create comprehensive backup script
          cat > production-backup.js << 'EOF'
          const { MongoClient } = require('mongodb');
          const fs = require('fs');
          const path = require('path');
          
          async function createBackup() {
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupDir = `backup-${timestamp}`;
            
            try {
              fs.mkdirSync(backupDir);
              
              const client = new MongoClient(process.env.MONGO_URL);
              await client.connect();
              console.log('✅ Connected to production database');
              
              const db = client.db();
              const collections = await db.listCollections().toArray();
              
              const backupData = {
                metadata: {
                  timestamp: new Date().toISOString(),
                  version: '1.0',
                  collections: collections.length
                },
                collections: {}
              };
              
              for (const collection of collections) {
                const collectionName = collection.name;
                console.log(`📁 Backing up collection: ${collectionName}`);
                
                const docs = await db.collection(collectionName).find({}).toArray();
                backupData.collections[collectionName] = docs;
                
                // Save individual collection files
                const collectionFile = path.join(backupDir, `${collectionName}.json`);
                fs.writeFileSync(collectionFile, JSON.stringify(docs, null, 2));
                
                console.log(`✅ ${docs.length} documents backed up from ${collectionName}`);
              }
              
              // Save complete backup
              const backupFile = `${backupDir}/complete-backup.json`;
              fs.writeFileSync(backupFile, JSON.stringify(backupData, null, 2));
              
              // Create backup metadata
              const metadataFile = `${backupDir}/backup-metadata.json`;
              const metadata = {
                timestamp: backupData.metadata.timestamp,
                collections: Object.keys(backupData.collections).length,
                totalDocuments: Object.values(backupData.collections).reduce((sum, docs) => sum + docs.length, 0),
                mongoUrl: process.env.MONGO_URL.replace(/\/\/[^:]+:[^@]+@/, '//***:***@'), // Mask credentials
                nodeEnv: process.env.NODE_ENV || 'production'
              };
              fs.writeFileSync(metadataFile, JSON.stringify(metadata, null, 2));
              
              await client.close();
              
              // Calculate backup size
              const stats = fs.statSync(backupFile);
              const backupSizeMB = (stats.size / (1024 * 1024)).toFixed(2);
              
              console.log(`✅ Backup completed successfully`);
              console.log(`📁 Backup directory: ${backupDir}`);
              console.log(`📄 Backup file: ${backupFile}`);
              console.log(`📊 Backup size: ${backupSizeMB} MB`);
              
              // Output for GitHub Actions
              console.log(`::set-output name=backup_file::${backupFile}`);
              console.log(`::set-output name=backup_size::${backupSizeMB} MB`);
              
            } catch (error) {
              console.error('❌ Backup failed:', error);
              process.exit(1);
            }
          }
          
          createBackup();
          EOF
          
          node production-backup.js
          
          # Set outputs
          echo "backup_file=$(ls backup-*/complete-backup.json)" >> $GITHUB_OUTPUT
          echo "backup_size=$(du -h backup-*/complete-backup.json | cut -f1)" >> $GITHUB_OUTPUT

      - name: 📁 Upload backup to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-backup-${{ github.run_number }}
          path: backup-*/
          retention-days: 90

      - name: ☁️ Upload backup to cloud storage
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
        run: |
          if [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$S3_BACKUP_BUCKET" ]; then
            echo "☁️ Uploading backup to S3..."
            aws s3 cp backup-*/ s3://$S3_BACKUP_BUCKET/production-backups/$(date +%Y/%m/%d)/ --recursive
            echo "✅ Backup uploaded to cloud storage"
          else
            echo "ℹ️ Cloud storage not configured, backup saved to artifacts only"
          fi

  # ===================================================================
  # BLUE-GREEN DEPLOYMENT - Deploy to target environment
  # ===================================================================
  blue-green-deployment:
    name: 🚀 Blue-Green Deployment
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, database-backup]
    if: always() && (needs.database-backup.result == 'success' || needs.database-backup.result == 'skipped')
    environment: production
    
    outputs:
      target_environment: ${{ needs.pre-deployment-validation.outputs.target_environment }}
      deployment_url: ${{ steps.deploy.outputs.deployment_url }}
      health_status: ${{ steps.health.outputs.status }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Setup target environment
        id: setup
        env:
          TARGET_ENV: ${{ needs.pre-deployment-validation.outputs.target_environment }}
        run: |
          echo "🏗️ Setting up $TARGET_ENV environment..."
          
          if [ "$TARGET_ENV" = "blue" ]; then
            echo "deployment_url=${{ env.BLUE_URL }}" >> $GITHUB_OUTPUT
            echo "environment_color=🔵 Blue" >> $GITHUB_OUTPUT
          else
            echo "deployment_url=${{ env.GREEN_URL }}" >> $GITHUB_OUTPUT
            echo "environment_color=🟢 Green" >> $GITHUB_OUTPUT
          fi
          
          echo "🎯 Target: ${{ steps.setup.outputs.environment_color }}"
          echo "🌐 URL: ${{ steps.setup.outputs.deployment_url }}"

      - name: 📦 Pull Docker images
        env:
          BACKEND_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-blog-backend:${{ inputs.image_tag }}
          FRONTEND_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-blog-frontend:${{ inputs.image_tag }}
        run: |
          echo "📦 Pulling Docker images for deployment..."
          docker pull $BACKEND_IMAGE
          docker pull $FRONTEND_IMAGE
          echo "✅ Images pulled successfully"

      - name: 🔧 Configure deployment environment
        env:
          TARGET_ENV: ${{ needs.pre-deployment-validation.outputs.target_environment }}
          MONGO_URL: ${{ secrets.PRODUCTION_MONGO_URL }}
          SECRET_KEY: ${{ secrets.PRODUCTION_SECRET_KEY }}
          REDIS_URL: ${{ secrets.PRODUCTION_REDIS_URL }}
        run: |
          echo "🔧 Configuring deployment environment..."
          
          # Create production environment file
          cat > .env.production.${TARGET_ENV} << EOF
          # Production Environment Configuration - ${TARGET_ENV}
          NODE_ENV=production
          PROD_PORT=8081
          MONGO_URL=$MONGO_URL
          SECRET_KEY=$SECRET_KEY
          REDIS_URL=$REDIS_URL
          VITE_API_URL=${{ steps.setup.outputs.deployment_url }}/api
          ENVIRONMENT_COLOR=${TARGET_ENV}
          DEPLOYMENT_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          DEPLOYMENT_VERSION=${{ inputs.image_tag }}
          EOF
          
          echo "✅ Environment configuration created for $TARGET_ENV"

      - name: 🚀 Deploy to target environment
        id: deploy
        env:
          TARGET_ENV: ${{ needs.pre-deployment-validation.outputs.target_environment }}
          BACKEND_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-blog-backend:${{ inputs.image_tag }}
          FRONTEND_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-blog-frontend:${{ inputs.image_tag }}
        run: |
          echo "🚀 Deploying to $TARGET_ENV environment..."
          
          # Create target-specific docker-compose file
          cp docker-compose.yaml docker-compose.production.${TARGET_ENV}.yaml
          
          # Update compose file for production deployment
          sed -i 's|build:|#build:|g' docker-compose.production.${TARGET_ENV}.yaml
          sed -i 's|context: ./blog-list|#context: ./blog-list|g' docker-compose.production.${TARGET_ENV}.yaml
          sed -i 's|dockerfile: Dockerfile|#dockerfile: Dockerfile|g' docker-compose.production.${TARGET_ENV}.yaml
          sed -i "/backend:/a \ \ image: $BACKEND_IMAGE" docker-compose.production.${TARGET_ENV}.yaml
          sed -i "/frontend:/a \ \ image: $FRONTEND_IMAGE" docker-compose.production.${TARGET_ENV}.yaml
          sed -i "/backend:/a \ \ env_file: .env.production.${TARGET_ENV}" docker-compose.production.${TARGET_ENV}.yaml
          sed -i "/frontend:/a \ \ env_file: .env.production.${TARGET_ENV}" docker-compose.production.${TARGET_ENV}.yaml
          
          # Update port mappings for blue-green
          if [ "$TARGET_ENV" = "blue" ]; then
            sed -i 's|"8081:8081"|"8082:8081"|g' docker-compose.production.${TARGET_ENV}.yaml
            sed -i 's|"3001:80"|"3002:80"|g' docker-compose.production.${TARGET_ENV}.yaml
          fi
          
          # Deploy the application
          docker-compose -f docker-compose.production.${TARGET_ENV}.yaml up -d
          
          # Wait for deployment to complete
          echo "⏳ Waiting for deployment to complete..."
          sleep 30
          
          # Wait for services to be healthy
          timeout 300 bash -c 'until docker-compose -f docker-compose.production.'${TARGET_ENV}'.yaml ps | grep -E "(healthy|running)"; do sleep 10; done'
          
          echo "deployment_url=${{ steps.setup.outputs.deployment_url }}" >> $GITHUB_OUTPUT
          echo "✅ Deployment to $TARGET_ENV completed"

      - name: 🏥 Health check deployment
        id: health
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.deployment_url }}
        run: |
          echo "🏥 Performing health checks on deployed application..."
          
          # Comprehensive health check script
          cat > health-check.js << 'EOF'
          const axios = require('axios');
          
          async function healthCheck() {
            const baseUrl = process.env.DEPLOYMENT_URL;
            const tests = [
              { name: 'Frontend Root', url: `${baseUrl}`, timeout: 30000 },
              { name: 'Backend Health', url: `${baseUrl}/api/ping`, timeout: 10000 },
              { name: 'API Blogs', url: `${baseUrl}/api/blogs`, timeout: 15000 },
              { name: 'API Users', url: `${baseUrl}/api/users`, timeout: 15000 }
            ];
            
            let allPassed = true;
            const results = [];
            
            for (const test of tests) {
              console.log(`🔍 Testing: ${test.name}`);
              try {
                const startTime = Date.now();
                const response = await axios.get(test.url, { 
                  timeout: test.timeout,
                  validateStatus: () => true 
                });
                const responseTime = Date.now() - startTime;
                
                if (response.status >= 200 && response.status < 400) {
                  console.log(`✅ ${test.name}: PASSED (${response.status}, ${responseTime}ms)`);
                  results.push({ ...test, status: 'PASSED', code: response.status, time: responseTime });
                } else {
                  console.log(`❌ ${test.name}: FAILED (${response.status}, ${responseTime}ms)`);
                  results.push({ ...test, status: 'FAILED', code: response.status, time: responseTime });
                  allPassed = false;
                }
              } catch (error) {
                console.log(`❌ ${test.name}: FAILED (${error.message})`);
                results.push({ ...test, status: 'FAILED', error: error.message });
                allPassed = false;
              }
              
              // Wait between tests
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            console.log('\n📊 Health Check Summary:');
            results.forEach(result => {
              console.log(`  ${result.status === 'PASSED' ? '✅' : '❌'} ${result.name}: ${result.status}`);
            });
            
            if (allPassed) {
              console.log('\n🎉 All health checks passed!');
              console.log('::set-output name=status::healthy');
            } else {
              console.log('\n❌ Some health checks failed!');
              console.log('::set-output name=status::unhealthy');
              process.exit(1);
            }
          }
          
          healthCheck();
          EOF
          
          # Install axios and run health checks
          npm install axios
          node health-check.js

  # ===================================================================
  # TRAFFIC SWITCH - Switch production traffic to new environment
  # ===================================================================
  traffic-switch:
    name: 🔄 Traffic Switch
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, blue-green-deployment]
    if: needs.blue-green-deployment.outputs.health_status == 'healthy'
    environment: production-traffic-switch
    
    outputs:
      switch_completed: ${{ steps.switch.outputs.completed }}
      previous_environment: ${{ needs.pre-deployment-validation.outputs.current_environment }}
    
    steps:
      - name: 🔄 Switch production traffic
        id: switch
        env:
          TARGET_ENV: ${{ needs.blue-green-deployment.outputs.target_environment }}
          TARGET_URL: ${{ needs.blue-green-deployment.outputs.deployment_url }}
        run: |
          echo "🔄 Switching production traffic to $TARGET_ENV environment..."
          echo "🎯 Target URL: $TARGET_URL"
          
          # Simulate traffic switch (in real scenario, this would update load balancer)
          echo "📡 Updating load balancer configuration..."
          echo "🔀 Routing traffic from ${{ needs.pre-deployment-validation.outputs.current_environment }} to $TARGET_ENV"
          
          # Wait for traffic switch to propagate
          sleep 10
          
          # Verify traffic switch
          echo "✅ Verifying traffic switch..."
          for i in {1..5}; do
            if curl -f "${{ env.PRODUCTION_URL }}/api/ping" >/dev/null 2>&1; then
              echo "✅ Production traffic is flowing correctly (attempt $i)"
            else
              echo "⚠️ Traffic verification failed (attempt $i)"
              sleep 5
            fi
          done
          
          echo "completed=true" >> $GITHUB_OUTPUT
          echo "🎉 Traffic switch completed successfully!"

  # ===================================================================
  # POST-DEPLOYMENT VALIDATION - Production validation and monitoring
  # ===================================================================
  post-deployment-validation:
    name: ✅ Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [traffic-switch, blue-green-deployment]
    if: needs.traffic-switch.outputs.switch_completed == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 🧪 Production smoke tests
        env:
          PRODUCTION_URL: ${{ env.PRODUCTION_URL }}
        run: |
          echo "🧪 Running production smoke tests..."
          
          # Install test dependencies
          npm install axios
          
          # Comprehensive production tests
          cat > production-tests.js << 'EOF'
          const axios = require('axios');
          
          async function productionTests() {
            const baseUrl = process.env.PRODUCTION_URL;
            const apiUrl = `${baseUrl}/api`;
            
            console.log('🚀 Starting production smoke tests...');
            
            const tests = [
              {
                name: 'Frontend Accessibility',
                test: async () => {
                  const response = await axios.get(baseUrl, { timeout: 30000 });
                  return response.status === 200 && response.data.includes('html');
                }
              },
              {
                name: 'API Health Check',
                test: async () => {
                  const response = await axios.get(`${apiUrl}/ping`, { timeout: 10000 });
                  return response.status === 200;
                }
              },
              {
                name: 'Blog Listing Performance',
                test: async () => {
                  const startTime = Date.now();
                  const response = await axios.get(`${apiUrl}/blogs`, { timeout: 15000 });
                  const responseTime = Date.now() - startTime;
                  return response.status === 200 && responseTime < 5000;
                }
              },
              {
                name: 'User Endpoint Availability',
                test: async () => {
                  const response = await axios.get(`${apiUrl}/users`, { timeout: 10000 });
                  return response.status === 200;
                }
              },
              {
                name: 'Security Headers',
                test: async () => {
                  const response = await axios.get(baseUrl, { timeout: 10000 });
                  return response.headers['x-content-type-options'] || 
                         response.headers['x-frame-options'] ||
                         response.headers['x-xss-protection'];
                }
              }
            ];
            
            let passed = 0;
            let failed = 0;
            
            for (const test of tests) {
              try {
                console.log(`🔍 Running: ${test.name}`);
                const result = await test.test();
                if (result) {
                  console.log(`✅ ${test.name}: PASSED`);
                  passed++;
                } else {
                  console.log(`❌ ${test.name}: FAILED`);
                  failed++;
                }
              } catch (error) {
                console.log(`❌ ${test.name}: FAILED (${error.message})`);
                failed++;
              }
              
              // Brief pause between tests
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            console.log(`\n📊 Production Test Results: ${passed} passed, ${failed} failed`);
            
            if (failed > 0) {
              console.log('❌ Some production tests failed!');
              process.exit(1);
            } else {
              console.log('🎉 All production tests passed!');
            }
          }
          
          productionTests();
          EOF
          
          node production-tests.js

      - name: 📊 Performance monitoring setup
        run: |
          echo "📊 Setting up performance monitoring..."
          
          # Create performance monitoring script
          cat > setup-monitoring.js << 'EOF'
          const axios = require('axios');
          
          async function setupMonitoring() {
            const baseUrl = process.env.PRODUCTION_URL;
            
            console.log('📊 Initializing performance monitoring...');
            
            // Collect baseline metrics
            const metrics = {
              timestamp: new Date().toISOString(),
              deployment: '${{ inputs.image_tag }}',
              environment: '${{ needs.blue-green-deployment.outputs.target_environment }}',
              tests: []
            };
            
            // Performance test endpoints
            const endpoints = [
              { name: 'Homepage', url: baseUrl },
              { name: 'API Health', url: `${baseUrl}/api/ping` },
              { name: 'Blog List', url: `${baseUrl}/api/blogs` }
            ];
            
            for (const endpoint of endpoints) {
              console.log(`📈 Testing ${endpoint.name}...`);
              
              const measurements = [];
              for (let i = 0; i < 3; i++) {
                try {
                  const startTime = Date.now();
                  await axios.get(endpoint.url, { timeout: 10000 });
                  const responseTime = Date.now() - startTime;
                  measurements.push(responseTime);
                } catch (error) {
                  console.log(`⚠️ ${endpoint.name} test ${i+1} failed: ${error.message}`);
                }
              }
              
              if (measurements.length > 0) {
                const avgTime = measurements.reduce((a, b) => a + b, 0) / measurements.length;
                metrics.tests.push({
                  name: endpoint.name,
                  url: endpoint.url,
                  averageResponseTime: Math.round(avgTime),
                  measurements: measurements
                });
                console.log(`✅ ${endpoint.name}: ${Math.round(avgTime)}ms average`);
              }
            }
            
            console.log('\n📊 Performance Baseline Established:');
            metrics.tests.forEach(test => {
              console.log(`  ${test.name}: ${test.averageResponseTime}ms`);
            });
            
            // Save metrics for future comparison
            require('fs').writeFileSync('performance-baseline.json', JSON.stringify(metrics, null, 2));
          }
          
          setupMonitoring();
          EOF
          
          PRODUCTION_URL=${{ env.PRODUCTION_URL }} node setup-monitoring.js

      - name: 📁 Upload performance baseline
        uses: actions/upload-artifact@v4
        with:
          name: performance-baseline-${{ github.run_number }}
          path: performance-baseline.json
          retention-days: 30

  # ===================================================================
  # CLEANUP OLD ENVIRONMENT - Clean up previous environment
  # ===================================================================
  cleanup-old-environment:
    name: 🧹 Cleanup Previous Environment
    runs-on: ubuntu-latest
    needs: [post-deployment-validation, traffic-switch]
    if: needs.post-deployment-validation.result == 'success'
    environment: production-cleanup
    
    steps:
      - name: 🧹 Clean up previous environment
        env:
          PREVIOUS_ENV: ${{ needs.traffic-switch.outputs.previous_environment }}
        run: |
          if [ "$PREVIOUS_ENV" != "none" ]; then
            echo "🧹 Cleaning up previous $PREVIOUS_ENV environment..."
            
            # Stop previous environment services
            echo "🛑 Stopping $PREVIOUS_ENV environment services..."
            
            # In a real scenario, this would:
            # - Stop the previous environment containers
            # - Clean up unused resources
            # - Preserve logs for troubleshooting
            
            echo "✅ Previous environment cleanup completed"
          else
            echo "ℹ️ No previous environment to clean up"
          fi

  # ===================================================================
  # ROLLBACK CAPABILITY - Automatic rollback on failure
  # ===================================================================
  rollback:
    name: 🔄 Automatic Rollback
    runs-on: ubuntu-latest
    needs: [blue-green-deployment, traffic-switch, post-deployment-validation]
    if: failure() && inputs.auto_rollback == 'true' && needs.traffic-switch.outputs.switch_completed == 'true'
    environment: production-rollback
    
    steps:
      - name: 🚨 Rollback deployment
        env:
          PREVIOUS_ENV: ${{ needs.traffic-switch.outputs.previous_environment }}
          CURRENT_ENV: ${{ needs.blue-green-deployment.outputs.target_environment }}
        run: |
          echo "🚨 AUTOMATIC ROLLBACK INITIATED"
          echo "📉 Rolling back from $CURRENT_ENV to $PREVIOUS_ENV"
          
          if [ "$PREVIOUS_ENV" != "none" ]; then
            echo "🔄 Switching traffic back to $PREVIOUS_ENV environment..."
            
            # In a real scenario, this would:
            # - Switch load balancer back to previous environment
            # - Verify previous environment is still healthy
            # - Update DNS records if necessary
            
            echo "✅ Rollback completed - traffic restored to $PREVIOUS_ENV"
            echo "📞 Operations team has been notified"
          else
            echo "❌ No previous environment available for rollback!"
            echo "🚨 Manual intervention required immediately"
          fi

  # ===================================================================
  # NOTIFICATIONS - Comprehensive deployment notifications
  # ===================================================================
  deployment-notifications:
    name: 📢 Deployment Notifications
    runs-on: ubuntu-latest
    needs: [blue-green-deployment, traffic-switch, post-deployment-validation, cleanup-old-environment, rollback]
    if: always()
    
    steps:
      - name: 📊 Prepare notification data
        id: data
        run: |
          # Determine overall deployment status
          if [ "${{ needs.post-deployment-validation.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=🎉" >> $GITHUB_OUTPUT
            echo "message=Production deployment completed successfully!" >> $GITHUB_OUTPUT
          elif [ "${{ needs.rollback.result }}" = "success" ]; then
            echo "status=rollback" >> $GITHUB_OUTPUT
            echo "emoji=🔄" >> $GITHUB_OUTPUT
            echo "message=Deployment failed and was automatically rolled back" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=Production deployment failed!" >> $GITHUB_OUTPUT
          fi

      - name: 📝 Create deployment report
        run: |
          cat > deployment-report.md << EOF
          # 🌟 Production Deployment Report
          
          **Status:** ${{ steps.data.outputs.status }} ${{ steps.data.outputs.emoji }}
          **Message:** ${{ steps.data.outputs.message }}
          **Environment:** ${{ needs.blue-green-deployment.outputs.target_environment }}
          **Image Tag:** ${{ inputs.image_tag }}
          **Deployment Type:** ${{ inputs.deployment_type }}
          **Timestamp:** $(date -u)
          **Triggered By:** ${{ github.actor }}
          
          ## Deployment Results
          - **Approval:** ${{ needs.approval-gate.result }}
          - **Validation:** ${{ needs.pre-deployment-validation.result }}
          - **Database Backup:** ${{ needs.database-backup.result }}
          - **Blue-Green Deployment:** ${{ needs.blue-green-deployment.result }}
          - **Traffic Switch:** ${{ needs.traffic-switch.result }}
          - **Post-deployment Validation:** ${{ needs.post-deployment-validation.result }}
          - **Cleanup:** ${{ needs.cleanup-old-environment.result }}
          - **Rollback:** ${{ needs.rollback.result }}
          
          ## URLs
          - **Production:** ${{ env.PRODUCTION_URL }}
          - **Blue Environment:** ${{ env.BLUE_URL }}
          - **Green Environment:** ${{ env.GREEN_URL }}
          
          ## Next Steps
          ${{ steps.data.outputs.status == 'success' && '- Monitor application performance and metrics\n- Verify all features are working correctly\n- Update documentation if needed' || '- Review deployment logs\n- Investigate failure causes\n- Plan recovery strategy' }}
          EOF

      - name: 📁 Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: production-deployment-report-${{ github.run_number }}
          path: deployment-report.md
          retention-days: 365

      - name: 🎉 Success notification
        if: steps.data.outputs.status == 'success'
        run: |
          echo "🎉 Production deployment completed successfully!"
          echo "🌐 Application is live at: ${{ env.PRODUCTION_URL }}"
          echo "🏷️ Deployed version: ${{ inputs.image_tag }}"
          echo "🔄 Environment: ${{ needs.blue-green-deployment.outputs.target_environment }}"

      - name: ❌ Failure notification
        if: steps.data.outputs.status == 'failure'
        run: |
          echo "❌ Production deployment failed!"
          echo "🔍 Please check the logs for details"
          echo "📞 Operations team should be notified immediately"

      - name: 🔄 Rollback notification
        if: steps.data.outputs.status == 'rollback'
        run: |
          echo "🔄 Deployment was automatically rolled back"
          echo "🔍 Previous environment has been restored"
          echo "📊 Please investigate the failure and plan next steps"