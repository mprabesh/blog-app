# ===================================================================
# Main CI Pipeline for Blog Application
# ===================================================================
#
# This workflow implements comprehensive CI/CD practices including:
# - Automated testing for frontend (Jest/React Testing Library) and backend (Jest/Supertest)
# - ESLint code quality checks for both frontend and backend
# - Docker image build validation with multi-stage builds
# - Security vulnerability scanning with npm audit
# - Code coverage reporting and artifact storage
# - Conditional builds based on file changes
#
# Triggers:
# - Push to main branch
# - Pull requests to main branch
# - Manual workflow dispatch
# ===================================================================

name: 🚀 CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for hotfixes)'
        required: false
        default: 'false'
        type: boolean
      environment:
        description: 'Environment to target'
        required: false
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===================================================================
  # DETECT CHANGES - Determine what components changed
  # ===================================================================
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docker: ${{ steps.changes.outputs.docker }}
      workflows: ${{ steps.changes.outputs.workflows }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect file changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # For main branch pushes, check all components
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "docker=true" >> $GITHUB_OUTPUT
            echo "workflows=true" >> $GITHUB_OUTPUT
            echo "docs=true" >> $GITHUB_OUTPUT
          else
            # For PRs, detect actual changes
            git diff --name-only HEAD~1 HEAD > changed_files.txt
            echo "Changed files:"
            cat changed_files.txt
            
            echo "backend=$(grep -E '^blog-list/' changed_files.txt | wc -l | awk '{print ($1 > 0 ? "true" : "false")}')" >> $GITHUB_OUTPUT
            echo "frontend=$(grep -E '^bloglist-frontend/' changed_files.txt | wc -l | awk '{print ($1 > 0 ? "true" : "false")}')" >> $GITHUB_OUTPUT
            echo "docker=$(grep -E '^(Dockerfile|docker-compose|\.dockerignore)' changed_files.txt | wc -l | awk '{print ($1 > 0 ? "true" : "false")}')" >> $GITHUB_OUTPUT
            echo "workflows=$(grep -E '^\.github/' changed_files.txt | wc -l | awk '{print ($1 > 0 ? "true" : "false")}')" >> $GITHUB_OUTPUT
            echo "docs=$(grep -E '^(docs/|README\.md|DOCUMENTATION\.md)' changed_files.txt | wc -l | awk '{print ($1 > 0 ? "true" : "false")}')" >> $GITHUB_OUTPUT
          fi

  # ===================================================================
  # BACKEND CI - Node.js API Testing and Quality Checks
  # ===================================================================
  backend-ci:
    name: 🖥️ Backend CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    defaults:
      run:
        working-directory: ./blog-list
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: bloglist_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: './blog-list/package-lock.json'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint code
        run: npm run lint

      - name: 🔒 Security audit
        run: npm audit --audit-level moderate

      - name: 🧪 Run tests
        if: ${{ !inputs.skip_tests }}
        env:
          NODE_ENV: test
          TEST_MONGO_URL: mongodb://testuser:testpass@localhost:27017/bloglist_test?authSource=admin
          SECRET_KEY: test-secret-key-for-ci
          TEST_PORT: 3002
        run: npm test -- --coverage --coverageReporters=text-lcov --coverageReporters=json

      - name: 📊 Upload coverage to Codecov
        if: matrix.node-version == '20.x' && !inputs.skip_tests
        uses: codecov/codecov-action@v3
        with:
          file: ./blog-list/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: 📁 Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results-node-${{ matrix.node-version }}
          path: |
            blog-list/coverage/
            blog-list/test-results.xml
          retention-days: 7

  # ===================================================================
  # FRONTEND CI - React Application Testing and Quality Checks
  # ===================================================================
  frontend-ci:
    name: 🌐 Frontend CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    defaults:
      run:
        working-directory: ./bloglist-frontend
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: './bloglist-frontend/package-lock.json'

      - name: 📦 Install dependencies
        run: npm ci --ignore-scripts

      - name: 🔍 Lint code
        run: npm run lint

      - name: 🔒 Security audit
        run: npm audit --audit-level moderate

      - name: 🏗️ Build application
        env:
          VITE_API_URL: http://localhost:8081/api
        run: npm run build

      - name: 🧪 Run unit tests
        if: ${{ !inputs.skip_tests }}
        run: npm test -- --coverage --coverageReporters=text-lcov --coverageReporters=json --watchAll=false

      - name: 📊 Upload coverage to Codecov
        if: matrix.node-version == '20.x' && !inputs.skip_tests
        uses: codecov/codecov-action@v3
        with:
          file: ./bloglist-frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: 📁 Archive build artifacts
        if: matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: bloglist-frontend/dist/
          retention-days: 7

      - name: 📁 Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results-node-${{ matrix.node-version }}
          path: |
            bloglist-frontend/coverage/
            bloglist-frontend/test-results.xml
          retention-days: 7

  # ===================================================================
  # DOCKER BUILD - Multi-stage Docker builds with optimization
  # ===================================================================
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [detect-changes, backend-ci, frontend-ci]
    if: always() && (needs.detect-changes.outputs.docker == 'true' || needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true')
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [backend, frontend]
        include:
          - component: backend
            context: ./blog-list
            dockerfile: ./blog-list/Dockerfile
            image-name: blog-backend
          - component: frontend
            context: ./bloglist-frontend
            dockerfile: ./bloglist-frontend/Dockerfile
            image-name: blog-frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image-name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image-name }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.component }}.sarif'

      - name: 📁 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.component }}.sarif'

  # ===================================================================
  # INTEGRATION TESTS - End-to-end testing with Docker Compose
  # ===================================================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: always() && needs.docker-build.result == 'success' && !inputs.skip_tests

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: bloglist_integration
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Setup environment
        run: |
          cp .env.example .env
          sed -i 's|MONGO_URL=.*|MONGO_URL=mongodb://testuser:testpass@localhost:27017/bloglist_integration?authSource=admin|' .env
          sed -i 's|SECRET_KEY=.*|SECRET_KEY=integration-test-secret-key|' .env
          sed -i 's|VITE_API_URL=.*|VITE_API_URL=http://localhost:8081/api|' .env

      - name: 🐳 Start application stack
        run: |
          # Pull the built images
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-blog-backend:${{ github.sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-blog-frontend:${{ github.sha }}
          
          # Update docker-compose to use built images
          sed -i 's|build:|#build:|g' docker-compose.yaml
          sed -i 's|context: ./blog-list|#context: ./blog-list|g' docker-compose.yaml
          sed -i 's|dockerfile: Dockerfile|#dockerfile: Dockerfile|g' docker-compose.yaml
          sed -i '/backend:/a \ \ image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-blog-backend:${{ github.sha }}' docker-compose.yaml
          sed -i '/frontend:/a \ \ image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-blog-frontend:${{ github.sha }}' docker-compose.yaml
          
          # Start the stack
          docker-compose up -d
          
          # Wait for services to be healthy
          timeout 300 bash -c 'until docker-compose ps | grep -q "healthy"; do sleep 5; done'

      - name: 🧪 Run integration tests
        run: |
          # Wait for backend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8081/api/ping; do sleep 2; done'
          
          # Wait for frontend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3001; do sleep 2; done'
          
          # Run basic API tests
          curl -f http://localhost:8081/api/ping
          curl -f http://localhost:8081/api/blogs
          
          # Test frontend accessibility
          curl -f http://localhost:3001

      - name: 📋 Collect logs
        if: always()
        run: |
          docker-compose logs > integration-test-logs.txt
          docker-compose ps

      - name: 📁 Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs
          path: integration-test-logs.txt
          retention-days: 7

      - name: 🧹 Cleanup
        if: always()
        run: docker-compose down -v

  # ===================================================================
  # QUALITY GATE - Final quality assessment and deployment readiness
  # ===================================================================
  quality-gate:
    name: ✅ Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, docker-build, integration-tests]
    if: always()

    steps:
      - name: 📊 Evaluate quality gate
        run: |
          echo "=== Quality Gate Results ==="
          
          backend_result="${{ needs.backend-ci.result }}"
          frontend_result="${{ needs.frontend-ci.result }}"
          docker_result="${{ needs.docker-build.result }}"
          integration_result="${{ needs.integration-tests.result }}"
          
          echo "Backend CI: $backend_result"
          echo "Frontend CI: $frontend_result"
          echo "Docker Build: $docker_result"
          echo "Integration Tests: $integration_result"
          
          # Determine overall result
          if [[ "$backend_result" == "success" || "$backend_result" == "skipped" ]] && \
             [[ "$frontend_result" == "success" || "$frontend_result" == "skipped" ]] && \
             [[ "$docker_result" == "success" || "$docker_result" == "skipped" ]] && \
             [[ "$integration_result" == "success" || "$integration_result" == "skipped" ]]; then
            echo "✅ Quality Gate: PASSED"
            echo "quality_gate=passed" >> $GITHUB_ENV
          else
            echo "❌ Quality Gate: FAILED"
            echo "quality_gate=failed" >> $GITHUB_ENV
            exit 1
          fi

      - name: 🎉 Quality gate passed
        if: env.quality_gate == 'passed'
        run: |
          echo "🎉 All quality checks passed!"
          echo "🚀 Ready for deployment to staging environment"

  # ===================================================================
  # NOTIFICATIONS - Notify about CI results
  # ===================================================================
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: 📢 Notify on success
        if: needs.quality-gate.result == 'success'
        run: |
          echo "✅ CI Pipeline completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Ready for deployment!"

      - name: 📢 Notify on failure
        if: needs.quality-gate.result == 'failure'
        run: |
          echo "❌ CI Pipeline failed!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Please check the logs and fix the issues."