# ===================================================================
# Standalone Frontend Docker Image
# ===================================================================
#
# This Dockerfile creates a self-contained frontend image that can be deployed
# independently across different environments with runtime environment variable
# injection. Perfect for CI/CD pipelines, Kubernetes deployments, or any
# scenario where you need the same image to work with different API endpoints.
#
# Features:
# - Multi-stage build for optimized image size
# - Runtime environment variable injection via entrypoint script
# - No dependencies on other services (can run standalone)
# - Security-hardened with non-root user
# - Health checks included
# - Support for different deployment environments
#
# Usage:
#   docker build -f Dockerfile.standalone -t blog-frontend:latest .
#   docker run -p 3001:80 -e VITE_API_URL=https://api.example.com blog-frontend:latest
#
# Environment Variables:
#   VITE_API_URL - Backend API URL (default: http://localhost:8081/api)
# ===================================================================

# Stage 1: Build the React application
FROM node:20-alpine AS builder

LABEL maintainer="blog-app"
LABEL service="frontend-standalone"
LABEL tier="public"
LABEL description="Standalone React frontend with runtime env injection"

# Set working directory
WORKDIR /app

# Copy package files first for better Docker layer caching
COPY package*.json ./

# Install dependencies
RUN npm ci --silent

# Copy source code
COPY src/ ./src/
COPY index.html ./
COPY vite.config.js ./
COPY index.css ./

# Build the application
# Note: Placeholders will be replaced at runtime by entrypoint script
RUN npm run build

# Stage 2: Production nginx server with runtime environment injection
FROM nginx:1.25-alpine

LABEL maintainer="blog-app"
LABEL service="frontend-standalone"
LABEL tier="public"
LABEL description="Production-ready frontend with runtime configuration"

# Install security updates and required tools
RUN apk update && \
    apk upgrade && \
    apk add --no-cache curl && \
    rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S nginx-app && \
    adduser -S nginx-app -u 1001 -G nginx-app

# Remove default nginx content
RUN rm -rf /usr/share/nginx/html/*

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration optimized for SPAs
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy runtime environment injection script
COPY entrypoint.sh /usr/local/bin/entrypoint.sh

# Make entrypoint script executable and set proper ownership
RUN chmod +x /usr/local/bin/entrypoint.sh && \
    chown -R nginx-app:nginx-app /usr/share/nginx/html && \
    chown -R nginx-app:nginx-app /var/cache/nginx && \
    chown -R nginx-app:nginx-app /var/log/nginx && \
    chown -R nginx-app:nginx-app /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx-app:nginx-app /var/run/nginx.pid && \
    chown nginx-app:nginx-app /usr/local/bin/entrypoint.sh

# Switch to non-root user for security
USER nginx-app

# Health check to ensure container is serving content
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Expose port 80
EXPOSE 80

# Set environment variable defaults (can be overridden at runtime)
ENV VITE_API_URL=http://localhost:8081/api

# Use custom entrypoint for runtime environment injection
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# ===================================================================
# Build and Run Examples:
# ===================================================================
#
# Build the image:
#   docker build -f Dockerfile.standalone -t blog-frontend:latest .
#
# Run with default API URL:
#   docker run -p 3001:80 blog-frontend:latest
#
# Run with custom API URL (development):
#   docker run -p 3001:80 -e VITE_API_URL=http://localhost:8081/api blog-frontend:latest
#
# Run with production API URL:
#   docker run -p 3001:80 -e VITE_API_URL=https://api.myapp.com blog-frontend:latest
#
# Run with staging API URL:
#   docker run -p 3001:80 -e VITE_API_URL=https://staging-api.myapp.com blog-frontend:latest
#
# Run in detached mode:
#   docker run -d -p 3001:80 -e VITE_API_URL=https://api.example.com blog-frontend:latest
#
# Check container logs:
#   docker logs <container_id>
#
# Check health status:
#   docker inspect <container_id> | grep Health -A 10
# ===================================================================
